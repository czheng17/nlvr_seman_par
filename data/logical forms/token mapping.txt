## Token inventory for a logical formal language.
## Each line has the structure:
## <token_name>	 <number of arguments>  [<types of arguments>] <return type> [: <necessary words>]
## Note that the number of arguments can be deduced, but was kept anyway just to be on the safe side.
## Tokens that represent known entities, like ALL_BOXES, or Color.BLUE are treated as
## Functions that take no arguments, and their return type is their own type, i.e.
## set<set<Item>>, and set<Color>, respectively.
## Question marks are used as 'wildcards'. So for example, 'count' gets an argument of type set<?>,
## which means that any set can be given as an argument to 'count'.
## Note that in order to generate logical forms that compile, all tokens here must correspond to
## functions defined in logical_forms.py. However, the opposite is not true, which means that we can have here
## only a subset of the possible functions defined in logical_forms.py.
## The optional list of necessary words is used for sentence driven constraints on the beam search.
## So for example, the line:
## is_bottom	1	Item	bool	:	bottom	first
## mean that the token is_bottom takes 1 argument of type 'Item', it returns a boolean,
## and if sentence-driven constraints are applied, it can only be used for parsing sentences that
## contain at least one of the words 'bottom' or 'first'


exist	1	set<?>	bool

#unique	1	set<Item>	Item

count	1	set<?>	int

filter	2	set<?> bool_func<?>	set<?>

All	2	set<?>	bool_func<?>	bool

Any	2	set<?>	bool_func<?>	bool

all_same_attribute	2	set<?>	func<?>	bool

## boolean Item functions

is_yellow	1	Item	bool	:	yellow

is_blue	1	Item	bool	:	blue

is_black	1	Item	bool	:	black

is_circle	1	Item	bool	:	circle

is_square	1	Item	bool	:	square

is_triangle	1	Item	bool	:	triangle

is_big	1	Item	bool	:	big

is_medium	1	Item	bool	: medium

is_small	1	Item	bool	: small

is_top	1	Item	bool	:	top	first

is_bottom	1	Item	bool	:	bottom	first

is_second	1	Item	bool	:	second	middle

is_third	1	Item	bool	: third

is_touching_wall	2	Item	Side	bool	: edge touch

is_touching_corner	2	Item	Side	bool	: corner

query_color	1	Item|set<Item>	set<Color>	: color black yellow blue

query_size	1	Item|set<Item>	set<Size>	: size big small medium

query_shape	1	Item|set<Item>	set<Shape>	: shape square triangle circle

le	2	int int	bool

ge	2	int int	bool	: most

lt	2	int int	bool	: more

gt	2	int int	bool	: less

equal_int	2	int int	bool

equal	2	? ?  bool

get_box_inclusive	1	Item	set<Item>

get_box_exclusive	1	Item	set<Item>

AND	2	bool	bool	bool

OR	2	bool	bool	bool

NOT	1	bool	bool	:  no not none different


all_same	1	set<?>	bool

union_all	1	set<set<Item>>	set<Item>


get_above	1	set<Item>|Item	set<Item>	:	on

get_below	1	set<Item>|Item	set<Item>	:	below

get_touching	1	set<Item>|Item	set<Item>	:	touch stack

select 2	int	set<?>	set<set<?>>	

## known entities

ALL_ITEMS 	0	set<Item>

ALL_BOXES	0	set<set<Item>>	: box	tower

Color.BLUE	0	set<Color>	:	blue

Color.BLACK	0	set<Color>	:	black

Color.YELLOW	0	set<Color>	:	yellow

Shape.TRIANGLE	0	set<Shape>	:	triangle

Shape.SQUARE	0	set<Shape>	:	square

Shape.CIRCLE	0	set<Shape>	:	circle

Side.RIGHT	0	Side	:	right

Side.LEFT	0	Side	:	left

Side.TOP	0	Side	:	top first

Side.BOTTOM	0	Side	:	bottom	first

Side.ANY	0	Side